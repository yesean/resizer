#!/usr/bin/env python

import argparse
import os

from PIL import Image
from screeninfo import get_monitors


def get_args():
    parser = argparse.ArgumentParser(
        prog='resizer',
        description=
        'Tool to crop and resize images based on monitor resolution.')
    parser.add_argument('--crop',
                        '-c',
                        dest='action',
                        action='store_const',
                        const='crop',
                        default='both')
    parser.add_argument('--scale',
                        '-s',
                        dest='action',
                        action='store_const',
                        const='scale')
    parser.add_argument('--write', '-w', action='store_true')
    parser.add_argument('filename')
    args = parser.parse_args()
    return args


args = get_args()
im = Image.open(args.filename)
monitor = get_monitors()[0]

print(f'Resize action: {args.action}')
print(f'Input image: {im.filename} {im.size}')
print(
    f'Identified monitor: {monitor.name} ({monitor.width}, {monitor.height})')


def crop(im: Image.Image):
    im_ar = im.width / im.height
    monitor_ar = monitor.width / monitor.height
    box = None
    if im_ar > monitor_ar:
        print('Image is wider than monitor, cropping image width.')
        cropped_image_width = int(im.height * monitor_ar)
        width_delta = im.width - cropped_image_width
        left, right = width_delta // 2, im.width - width_delta // 2
        print(f'Shrinking width from {im.width} to {cropped_image_width}')
        print(f'Setting width as ({left}, {right})')
        print(
            f'Cropping from {im.size} to ({cropped_image_width}, {im.height})')
        box = left, 0, right, im.height
    else:
        print('Image is taller than monitor, cropping image height.')
        cropped_image_height = int(im.width // monitor_ar)
        height_delta = im.height - cropped_image_height
        upper, lower = height_delta // 2, im.height - height_delta // 2
        print(f'Shrinking height from {im.height} to {cropped_image_height}')
        print(f'Setting height as ({upper}, {lower})')
        print(
            f'Cropping from {im.size} to ({im.width}, {cropped_image_height})')
        box = 0, upper, im.width, lower

    return im.crop(box)


def scale(im: Image.Image):
    print(
        f'Scaling image from {im.size} to ({monitor.width}, {monitor.height})')
    return im.resize((monitor.width, monitor.height))


def write(im: Image.Image):
    modifier = {
        'crop': 'cropped',
        'scale': 'scaled',
        'both': 'cropped-scaled',
    }
    f, _ = os.path.splitext(args.filename)
    outfile = args.filename if args.write else f'{f}-{modifier[args.action]}.jpg'
    print(f'Writing new image to: {outfile}')
    im.save(outfile)


if args.action == 'crop':
    write(crop(im))
elif args.action == 'scale':
    write(scale(im))
else:
    write(scale(crop(im)))
